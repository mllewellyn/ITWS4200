<!DOCTYPE html>
<html ng-app="" ng-controller="tweetDisplayController">
<head>
  <meta charset="utf-8">
  
  <title>Lab 7 - node.js, mongoDB and tweets</title>

  <!-- <link rel="stylesheet" href="../../css/foundation.css"> -->
  <link src="http://cdn.foundation5.zurb.com/foundation.css"/>
  <link src="https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.1/css/normalize.css"/>
  <!-- <link rel="stylesheet" href="../../css/normalize.css"> -->
  <link rel='stylesheet' href='/stylesheets/lab5.css'/>
  <!-- <link rel="stylesheet" href="style.css"> -->

  <!-- <script src="../../js/vendor/jquery.js"></script> -->
  <!-- <script src="../../js/foundation/foundation.js"></script> -->
  <script src="//code.jquery.com/jquery-1.11.2.min.js"></script>
  <script src="http://cdn.foundation5.zurb.com/foundation.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js"></script>
  
</head>
<body>
  
  <div class="large-4 column title" data-role="header">
    <h3>Lab 7 - node.js, mongoDB and tweets</h3>
  </div>

  <div>
    Number of tweets <input type="number" ng-model="tweetCount"/>
    <button ng-click="getTweets(tweetCount);">Get Tweets</button>
    <br />
    <button ng-click="makeTweetDB(tweetCount);">Read tweets into db</button>
    <button ng-click="readTweetDB(tweetCount);">Read tweets from db</button>
    <br/><br/>
    CSV download name <input type="text" ng-model="CSVName"/>
    <button ng-click="getTweetsCSV(CSVName);">Download Tweets as CSV</button>
    <br /><br />
    
    JSON from db download name <input type="text" ng-model="JSONDBName"/>
    <button ng-click="getTweetsJSONDB(JSONDBName);">Download tweets from db</button>
  </div>

  <div class="row tweet tweet-template">
    <div class="large-4 column"><img src=""></div>
    <div class="large-8 column"><p class="tweet-text"></p></div>
  </div>

  <div class="panel hashtag hashtag-template wordwrap">A hashtag</div>

  <div role="main" class="ui-content">
      <div class="ui-grid-b my-breakpoint">
        <div class="ui-block-a" id="tweets"></div>
        <div class="ui-block-b" id="hashtags"></div>
      </div>
  </div>
<script>
// keep track of which tweet to add next
var lastTweetAdded = -1;
var lastHashtagAdded = 0;
// arrays to hold tweets and hashtags
var tweets, hashtags;
// how many tweets and hashtags to display at one time
var tweetsToShow = 5;
var hashtagsToShow = 5;
// templates for new tweets or hashtag HTML elements
var tweetTemplate, hashtagTemplate;

// keep json data so it can be exported to a CSV later
var tweets_json;

window.onload = function() {
  // set up tweet and hashtag template
  tweetTemplate = $(".tweet-template").clone();
  tweetTemplate.removeClass("tweet-template");
  $(".tweet-template").remove();

  hashtagTemplate = $(".hashtag-template").clone();
  hashtagTemplate.removeClass("hashtag-template");
  $(".hashtag-template").remove();

  // uncomment for automatic tweet getting
  // var count = 10
  // getTweetJson("/getTweets", count);
}

function getTweetJson(json_location, count) {
  // make an AJAX call to get tweet data
  var jqxhr = $.getJSON(json_location, { "count":count }, function(data) {
    console.log("success");
    tweets_json = data;
    tweets = setUpTweets(data);
    setUpHashtags(tweets);

  })
  .fail(function( jqxhr, textStatus, error ) {
      var err = textStatus + ", " + error;
      console.log("Request Failed: " + err );
    })
}

// angular stuff
function tweetDisplayController($scope) {

  $scope.getTweets = function(tweetCount) {
    getTweetJson('/getTweets', tweetCount)
  };

  $scope.getTweetsCSV = function(filename) {
    // send an AJAX call to make the CSV
    var jqxhr = $.get('/makeTweetsCSV', { "filename":filename }, 
      function(csv_url) {
        // download the csv
        window.open(csv_url);

  })
  .fail(function( jqxhr, textStatus, error ) {
      var err = textStatus + ", " + error;
      console.log("Request Failed: " + err );
    })

  };

  $scope.makeTweetDB = function(tweetCount) {
    getTweetJson('/makeTweetDB', tweetCount)
  };

  $scope.readTweetDB = function(tweetCount) {
    getTweetJson('/getTweetsFromDB', tweetCount)
  };

  $scope.getTweetsJSONDB = function(filename) {
    // send an AJAX call to make the JSON
    var jqxhr = $.get('/makeTweetsJSONDB', { "filename":filename }, 
      function(json_url) {
        // download the json
        window.open(json_url);
    })
    .fail(function( jqxhr, textStatus, error ) {
        var err = textStatus + ", " + error;
        console.log("Request Failed: " + err );
      })
    };

}

function setUpTweets(data) {
  tweets = data;
  // add the first X tweets
    for(var i=0; i<tweetsToShow; ++i) {
      addNextTweet();
    }
    // set up tweet scroll animation
    setInterval(function() { 
      $("#tweets .row:nth-child(1)").slideUp("slow", function() {
        addNextTweet();
        $(this).remove();
      });
    }, 3000);

    return tweets;
}

function addNextTweet() {
  // if at the end of the list wrap around to the start
  if(lastTweetAdded >= tweets.length)
    lastTweetAdded = -1;
  $("#tweets").append(buildTweet(tweets[++lastTweetAdded]));
}

function buildTweet(tweet) {
  // make a clone of the template
  html = tweetTemplate.clone();
  // populate the clone with tweet data
  $(html).find("img").attr("src", tweet.user.profile_image_url);
  $(html).find(".tweet-text").text(tweet.text);

  return html;
}

function setUpHashtags (tweets) {
  // extract all the hashtags and store them in an object for fast lookup
  // fast lookup means this loop runs in O(n log n) as opposed to O(n^2)
    hashtag_object = {}
    for(var i=0; i<tweets.length; ++i) {
      for(var j=0; j<tweets[i].entities.hashtags.length; ++j) {
        // if hashtag is NOT already stored store it
        var tag = tweets[i].entities.hashtags[j].text;
        if(!(tag in hashtag_object))
          hashtag_object[tag] = true;
      }
    }

    // move the hashtags to a list for easier handling
    hashtags = $.map(hashtag_object, function(value, key) { return key; });

    // add the first X hashtags
  for(var i=0; i<hashtagsToShow; ++i) {
    addNextHashtag();
  }

  // set up hashtag scroll animation
    setInterval(function() { 
      $("#hashtags .panel:nth-child(1)").slideUp("slow", function() {
        addNextHashtag();
        $(this).remove();
      });
    }, 4000);
}

function addNextHashtag() {
  // if at the end of the list wrap around to the start
  if(lastHashtagAdded >= hashtags.length)
    lastHashtagAdded = -1;
  $("#hashtags").append(buildHashtag(hashtags[++lastHashtagAdded]));
}

function buildHashtag(hashtag) {
  // make a clone of the template
  html = hashtagTemplate.clone();
  // populate the clone with hashtag data
  $(html).text("#"+hashtag);
  return html;
}
</script>
</body>
</html>